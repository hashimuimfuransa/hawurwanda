import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import { useAuthStore } from '../stores/authStore';
import { useTranslationStore, t } from '../stores/translationStore';
import { adminService, bookingService, notificationService } from '../services/api';
import { 
  Users, 
  Building2, 
  CheckCircle, 
  XCircle, 
  BarChart3, 
  Bell,
  Search,
  Filter,
  Eye,
  EyeOff,
  Shield,
  Home,
  Calendar,
  Clock,
  TrendingUp,
  Activity,
  DollarSign,
  MapPin,
  Phone,
  Mail,
  Edit,
  Trash2,
  Plus,
  Download,
  PieChart,
  LineChart,
  Settings,
  Zap,
  FileText,
  AlertTriangle,
  Target,
  Award,
  Briefcase,
  Star,
  UserCheck,
  TimerIcon,
  ArrowUp,
  ArrowDown,
  ExternalLink,
  RefreshCw,
  Heart,
  Timer,
  Camera,
  User,
  Scissors,
  X
} from 'lucide-react';
import toast from 'react-hot-toast';
import DashboardLayout from '../components/DashboardLayout';

const AdminPanel: React.FC = () => {
  const { user } = useAuthStore();
  const navigate = useNavigate();
  const { language } = useTranslationStore();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState('overview');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedRole, setSelectedRole] = useState('');
  const [showCreateUserModal, setShowCreateUserModal] = useState(false);
  const [showSalonDetailsModal, setShowSalonDetailsModal] = useState(false);
  const [selectedSalonId, setSelectedSalonId] = useState<string | null>(null);
  const [ownerSearchTerm, setOwnerSearchTerm] = useState('');
  const [bookingSearchTerm, setBookingSearchTerm] = useState('');
  const [bookingStatusFilter, setBookingStatusFilter] = useState('');
  const [dateRange, setDateRange] = useState({
    startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    endDate: new Date().toISOString().split('T')[0],
  });

  // Redirect super admins to super admin dashboard
  useEffect(() => {
    if (user?.role === 'superadmin') {
      navigate('/superadmin');
    } else if (user && user.role !== 'admin') {
      navigate('/');
    }
  }, [user, navigate]);

  // Don't render if not authorized
  if (!user || user.role !== 'admin') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Access Denied</h2>
          <p className="text-gray-600">You don't have permission to access this page.</p>
        </div>
      </div>
    );
  }

  // Dashboard data
  const { data: reportsData } = useQuery({
    queryKey: ['admin-reports'],
    queryFn: () => adminService.getReports(),
    enabled: user?.role === 'admin',
  });

  // Extract reports from API response
  const reports = reportsData?.data || {};

  // Pending salons
  const { data: pendingSalonsData, isLoading: salonsLoading } = useQuery({
    queryKey: ['pending-salons'],
    queryFn: () => adminService.getPendingSalons(),
    enabled: user?.role === 'admin',
  });

  // Extract salons from API response
  const pendingSalons = pendingSalonsData?.data?.salons || [];

  // Salon details query
  const { data: salonDetailsData, isLoading: salonDetailsLoading } = useQuery({
    queryKey: ['salon-details', selectedSalonId],
    queryFn: () => adminService.getSalonDetails(selectedSalonId!),
    enabled: !!selectedSalonId && user?.role === 'admin',
  });

  const salonDetails = salonDetailsData?.data?.salon || null;

  // Users (use super admin endpoint for better access)
  const { data: usersData, isLoading: usersLoading } = useQuery({
    queryKey: ['admin-users', { searchTerm, selectedRole }],
    queryFn: () => adminService.getAllUsers({ search: searchTerm, role: selectedRole }),
    enabled: user?.role === 'admin',
  });

  // Salon owners
  const { data: ownersData, isLoading: ownersLoading } = useQuery({
    queryKey: ['salon-owners', { ownerSearchTerm }],
    queryFn: () => adminService.getAllUsers({ search: ownerSearchTerm, role: 'owner' }),
    enabled: user?.role === 'admin',
  });

  // Extract users from API response
  const users = usersData?.data?.users || [];
  const owners = ownersData?.data?.users || [];

  // Bookings data
  const { data: bookingsData, isLoading: bookingsLoading } = useQuery({
    queryKey: ['admin-bookings', { search: bookingSearchTerm, status: bookingStatusFilter, startDate: dateRange.startDate, endDate: dateRange.endDate }],
    queryFn: () => adminService.getAllBookings({ 
      search: bookingSearchTerm, 
      status: bookingStatusFilter,
      startDate: dateRange.startDate,
      endDate: dateRange.endDate 
    }),
    enabled: user?.role === 'admin',
  });

  // Notifications data
  const { data: notificationsData, isLoading: notificationsLoading } = useQuery({
    queryKey: ['admin-notifications'],
    queryFn: () => adminService.getNotifications(),
    enabled: user?.role === 'admin',
  });

  // Analytics data
  const { data: analyticsData, isLoading: analyticsLoading } = useQuery({
    queryKey: ['admin-analytics', dateRange],
    queryFn: () => adminService.getComprehensiveStats(),
    enabled: user?.role === 'admin',
  });

  // Extract data from API responses
  const bookings = bookingsData?.data?.bookings || [];
  const notifications = notificationsData?.data?.notifications || [];
  const analytics = analyticsData?.data || {};

  // Verify salon mutation
  const verifySalonMutation = useMutation({
    mutationFn: ({ id, verified }: { id: string; verified: boolean }) =>
      adminService.verifySalon(id, verified),
    onSuccess: () => {
      toast.success('Salon verification updated!');
      queryClient.invalidateQueries({ queryKey: ['pending-salons'] });
      queryClient.invalidateQueries({ queryKey: ['admin-reports'] });
    },
    onError: () => {
      toast.error('Failed to update salon verification');
    },
  });

  // Create user mutation
  const createUserMutation = useMutation({
    mutationFn: (userData: any) => adminService.createUser(userData),
    onSuccess: (data, variables) => {
      const roleType = variables.role;
      toast.success(`${roleType.charAt(0).toUpperCase() + roleType.slice(1)} created successfully!`);
      queryClient.invalidateQueries({ queryKey: ['admin-users'] });
      queryClient.invalidateQueries({ queryKey: ['salon-owners'] });
      queryClient.invalidateQueries({ queryKey: ['admin-reports'] });
      setShowCreateUserModal(false);
    },
    onError: (error: any) => {
      toast.error(error?.response?.data?.message || 'Failed to create user');
    },
  });

  // Update booking status mutation
  const updateBookingStatusMutation = useMutation({
    mutationFn: ({ id, status, notes }: { id: string; status: string; notes?: string }) =>
      bookingService.updateBookingStatus(id, status, notes),
    onSuccess: () => {
      toast.success('Booking status updated successfully!');
      queryClient.invalidateQueries({ queryKey: ['admin-bookings'] });
      queryClient.invalidateQueries({ queryKey: ['admin-analytics'] });
    },
    onError: (error: any) => {
      toast.error(error?.response?.data?.message || 'Failed to update booking status');
    },
  });

  // Mark notification as read mutation
  const markNotificationReadMutation = useMutation({
    mutationFn: (id: string) => notificationService.markAsRead(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['admin-notifications'] });
    },
    onError: (error: any) => {
      toast.error('Failed to mark notification as read');
    },
  });

  // Mark all notifications as read mutation
  const markAllNotificationsReadMutation = useMutation({
    mutationFn: () => notificationService.markAllAsRead(),
    onSuccess: () => {
      toast.success('All notifications marked as read');
      queryClient.invalidateQueries({ queryKey: ['admin-notifications'] });
    },
    onError: (error: any) => {
      toast.error('Failed to mark all notifications as read');
    },
  });

  const sidebarItems = [
    { id: 'overview', label: 'Overview', icon: Home },
    { id: 'bookings', label: 'Booking Management', icon: Calendar, badge: bookings.filter((b: any) => b.status === 'pending').length },
    { id: 'analytics', label: 'Analytics', icon: TrendingUp },
    { id: 'salons', label: 'Salon Verification', icon: Building2, badge: pendingSalons?.length },
    { id: 'owners', label: 'Salon Owners', icon: Users },
    { id: 'users', label: 'User Management', icon: Users },
    { id: 'reports', label: 'Reports', icon: BarChart3 },
    { id: 'activities', label: 'System Activities', icon: Activity },
    { id: 'notifications', label: 'Notifications', icon: Bell, badge: notifications.filter((n: any) => !n.read).length }
  ];

  const renderContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className="space-y-8">
            {/* Welcome Header */}
            <div className="bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-700 rounded-2xl p-8 text-white">
              <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
                <div>
                  <h1 className="text-3xl font-bold mb-2">Welcome back, {user?.name}!</h1>
                  <p className="text-blue-100 text-lg">Here's your system overview for today</p>
                </div>
                <div className="mt-4 md:mt-0 flex items-center space-x-3">
                  <button 
                    onClick={() => window.location.reload()}
                    className="bg-white/20 hover:bg-white/30 backdrop-blur-sm px-4 py-2 rounded-lg text-white transition-all duration-200 flex items-center space-x-2"
                  >
                    <RefreshCw className="h-4 w-4" />
                    <span>Refresh</span>
                  </button>
                  <div className="text-right text-blue-100">
                    <p className="text-sm">Last updated</p>
                    <p className="text-xs">{new Date().toLocaleTimeString()}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200">
              <div className="px-6 py-4 border-b border-gray-200">
                <h3 className="text-xl font-bold text-gray-900 flex items-center">
                  <Zap className="h-5 w-5 text-yellow-500 mr-2" />
                  Quick Actions
                </h3>
              </div>
              <div className="p-6">
                <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
                  <button
                    onClick={() => setActiveTab('bookings')}
                    className="group flex flex-col items-center p-4 rounded-xl bg-blue-50 hover:bg-blue-100 transition-all duration-200 border-2 border-transparent hover:border-blue-200"
                  >
                    <div className="p-3 bg-blue-500 rounded-xl group-hover:scale-110 transition-transform">
                      <Calendar className="h-6 w-6 text-white" />
                    </div>
                    <span className="mt-2 text-sm font-semibold text-gray-700">View Bookings</span>
                  </button>
                  
                  <button
                    onClick={() => setActiveTab('salons')}
                    className="group flex flex-col items-center p-4 rounded-xl bg-green-50 hover:bg-green-100 transition-all duration-200 border-2 border-transparent hover:border-green-200"
                  >
                    <div className="p-3 bg-green-500 rounded-xl group-hover:scale-110 transition-transform">
                      <Building2 className="h-6 w-6 text-white" />
                    </div>
                    <span className="mt-2 text-sm font-semibold text-gray-700">Manage Salons</span>
                  </button>

                  <button
                    onClick={() => setActiveTab('users')}
                    className="group flex flex-col items-center p-4 rounded-xl bg-purple-50 hover:bg-purple-100 transition-all duration-200 border-2 border-transparent hover:border-purple-200"
                  >
                    <div className="p-3 bg-purple-500 rounded-xl group-hover:scale-110 transition-transform">
                      <Users className="h-6 w-6 text-white" />
                    </div>
                    <span className="mt-2 text-sm font-semibold text-gray-700">User Management</span>
                  </button>

                  <button
                    onClick={() => setActiveTab('analytics')}
                    className="group flex flex-col items-center p-4 rounded-xl bg-orange-50 hover:bg-orange-100 transition-all duration-200 border-2 border-transparent hover:border-orange-200"
                  >
                    <div className="p-3 bg-orange-500 rounded-xl group-hover:scale-110 transition-transform">
                      <TrendingUp className="h-6 w-6 text-white" />
                    </div>
                    <span className="mt-2 text-sm font-semibold text-gray-700">Analytics</span>
                  </button>

                  <button
                    onClick={() => setActiveTab('notifications')}
                    className="group flex flex-col items-center p-4 rounded-xl bg-red-50 hover:bg-red-100 transition-all duration-200 border-2 border-transparent hover:border-red-200"
                  >
                    <div className="p-3 bg-red-500 rounded-xl group-hover:scale-110 transition-transform relative">
                      <Bell className="h-6 w-6 text-white" />
                      {notifications.filter((n: any) => !n.read).length > 0 && (
                        <span className="absolute -top-1 -right-1 bg-yellow-400 text-yellow-900 text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold">
                          {notifications.filter((n: any) => !n.read).length}
                        </span>
                      )}
                    </div>
                    <span className="mt-2 text-sm font-semibold text-gray-700">Notifications</span>
                  </button>

                  <button
                    onClick={() => setActiveTab('reports')}
                    className="group flex flex-col items-center p-4 rounded-xl bg-teal-50 hover:bg-teal-100 transition-all duration-200 border-2 border-transparent hover:border-teal-200"
                  >
                    <div className="p-3 bg-teal-500 rounded-xl group-hover:scale-110 transition-transform">
                      <FileText className="h-6 w-6 text-white" />
                    </div>
                    <span className="mt-2 text-sm font-semibold text-gray-700">Reports</span>
                  </button>
                </div>
              </div>
            </div>

            {/* Enhanced Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {/* Total Salons Card */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-semibold text-gray-600 uppercase tracking-wide">Total Salons</p>
                      <p className="text-3xl font-bold text-gray-900 mt-2">
                        {reports?.summary?.totalSalons || 0}
                      </p>
                      <div className="flex items-center mt-2">
                        <ArrowUp className="h-4 w-4 text-green-500" />
                        <span className="text-sm text-green-600 font-medium">+12% from last month</span>
                      </div>
                    </div>
                    <div className="p-4 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl">
                      <Building2 className="h-8 w-8 text-white" />
                    </div>
                  </div>
                </div>
                <div className="bg-blue-50 px-6 py-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-blue-600 font-medium">Active: {reports?.summary?.activeSalons || 0}</span>
                    <span className="text-gray-500">Pending: {pendingSalons?.length || 0}</span>
                  </div>
                </div>
              </div>

              {/* Total Users Card */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-semibold text-gray-600 uppercase tracking-wide">Total Users</p>
                      <p className="text-3xl font-bold text-gray-900 mt-2">
                        {reports?.summary?.totalUsers || 0}
                      </p>
                      <div className="flex items-center mt-2">
                        <ArrowUp className="h-4 w-4 text-green-500" />
                        <span className="text-sm text-green-600 font-medium">+8% from last month</span>
                      </div>
                    </div>
                    <div className="p-4 bg-gradient-to-br from-green-500 to-green-600 rounded-xl">
                      <Users className="h-8 w-8 text-white" />
                    </div>
                  </div>
                </div>
                <div className="bg-green-50 px-6 py-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-green-600 font-medium">Clients: {reports?.summary?.totalClients || 0}</span>
                    <span className="text-gray-500">Barbers: {reports?.summary?.totalBarbers || 0}</span>
                  </div>
                </div>
              </div>

              {/* Total Bookings Card */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-semibold text-gray-600 uppercase tracking-wide">Total Bookings</p>
                      <p className="text-3xl font-bold text-gray-900 mt-2">
                        {bookings.length || 0}
                      </p>
                      <div className="flex items-center mt-2">
                        <ArrowUp className="h-4 w-4 text-green-500" />
                        <span className="text-sm text-green-600 font-medium">+15% from last week</span>
                      </div>
                    </div>
                    <div className="p-4 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl">
                      <Calendar className="h-8 w-8 text-white" />
                    </div>
                  </div>
                </div>
                <div className="bg-purple-50 px-6 py-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-purple-600 font-medium">Today: {bookings.filter((b: any) => new Date(b.createdAt).toDateString() === new Date().toDateString()).length}</span>
                    <span className="text-gray-500">Pending: {bookings.filter((b: any) => b.status === 'pending').length}</span>
                  </div>
                </div>
              </div>

              {/* Revenue Card */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                <div className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-semibold text-gray-600 uppercase tracking-wide">Monthly Revenue</p>
                      <p className="text-3xl font-bold text-gray-900 mt-2">
                        ${analytics?.monthlyRevenue?.toLocaleString() || '0'}
                      </p>
                      <div className="flex items-center mt-2">
                        <ArrowUp className="h-4 w-4 text-green-500" />
                        <span className="text-sm text-green-600 font-medium">+23% from last month</span>
                      </div>
                    </div>
                    <div className="p-4 bg-gradient-to-br from-yellow-500 to-yellow-600 rounded-xl">
                      <DollarSign className="h-8 w-8 text-white" />
                    </div>
                  </div>
                </div>
                <div className="bg-yellow-50 px-6 py-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-yellow-600 font-medium">Avg: ${((analytics?.monthlyRevenue || 0) / 30).toFixed(0)}/day</span>
                    <span className="text-gray-500">Target: 95%</span>
                  </div>
                </div>
              </div>
            </div>

            {/* System Health & Performance */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* System Status */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                <div className="px-6 py-4 border-b border-gray-200">
                  <h3 className="text-lg font-bold text-gray-900 flex items-center">
                    <Activity className="h-5 w-5 text-green-500 mr-2" />
                    System Health
                  </h3>
                </div>
                <div className="p-6 space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                      <span className="text-sm font-medium text-gray-700">Server Status</span>
                    </div>
                    <span className="text-sm text-green-600 font-semibold">Online</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-sm font-medium text-gray-700">Database</span>
                    </div>
                    <span className="text-sm text-green-600 font-semibold">Connected</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                      <span className="text-sm font-medium text-gray-700">API Response</span>
                    </div>
                    <span className="text-sm text-yellow-600 font-semibold">125ms</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span className="text-sm font-medium text-gray-700">Uptime</span>
                    </div>
                    <span className="text-sm text-green-600 font-semibold">99.9%</span>
                  </div>
                </div>
              </div>

              {/* Key Performance Indicators */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                <div className="px-6 py-4 border-b border-gray-200">
                  <h3 className="text-lg font-bold text-gray-900 flex items-center">
                    <Target className="h-5 w-5 text-blue-500 mr-2" />
                    Key Metrics
                  </h3>
                </div>
                <div className="p-6 space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-700">Booking Success Rate</span>
                    <div className="flex items-center space-x-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-green-500 h-2 rounded-full" style={{width: '87%'}}></div>
                      </div>
                      <span className="text-sm text-green-600 font-semibold">87%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-700">Customer Satisfaction</span>
                    <div className="flex items-center space-x-2">
                      <div className="w-20 bg-gray-200 rounded-full h-2">
                        <div className="bg-blue-500 h-2 rounded-full" style={{width: '94%'}}></div>
                      </div>
                      <span className="text-sm text-blue-600 font-semibold">94%</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-700">Avg. Response Time</span>
                    <div className="flex items-center space-x-2">
                      <Timer className="h-4 w-4 text-purple-500" />
                      <span className="text-sm text-purple-600 font-semibold">2.3min</span>
                    </div>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-700">Active Sessions</span>
                    <span className="text-sm text-orange-600 font-semibold">{reports?.summary?.activeSessions || 0}</span>
                  </div>
                </div>
              </div>

              {/* Pending Actions */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200">
                <div className="px-6 py-4 border-b border-gray-200">
                  <h3 className="text-lg font-bold text-gray-900 flex items-center">
                    <AlertTriangle className="h-5 w-5 text-orange-500 mr-2" />
                    Attention Required
                  </h3>
                </div>
                <div className="p-6 space-y-4">
                  <div 
                    className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg cursor-pointer hover:bg-yellow-100 transition-colors"
                    onClick={() => setActiveTab('salons')}
                  >
                    <div className="flex items-center space-x-3">
                      <Shield className="h-4 w-4 text-yellow-600" />
                      <span className="text-sm font-medium text-gray-700">Salon Approvals</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="bg-yellow-200 text-yellow-800 px-2 py-1 rounded-full text-xs font-bold">
                        {pendingSalons?.length || 0}
                      </span>
                      <ExternalLink className="h-4 w-4 text-gray-400" />
                    </div>
                  </div>
                  
                  <div 
                    className="flex items-center justify-between p-3 bg-red-50 rounded-lg cursor-pointer hover:bg-red-100 transition-colors"
                    onClick={() => setActiveTab('bookings')}
                  >
                    <div className="flex items-center space-x-3">
                      <Calendar className="h-4 w-4 text-red-600" />
                      <span className="text-sm font-medium text-gray-700">Pending Bookings</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="bg-red-200 text-red-800 px-2 py-1 rounded-full text-xs font-bold">
                        {bookings.filter((b: any) => b.status === 'pending').length}
                      </span>
                      <ExternalLink className="h-4 w-4 text-gray-400" />
                    </div>
                  </div>

                  <div 
                    className="flex items-center justify-between p-3 bg-blue-50 rounded-lg cursor-pointer hover:bg-blue-100 transition-colors"
                    onClick={() => setActiveTab('notifications')}
                  >
                    <div className="flex items-center space-x-3">
                      <Bell className="h-4 w-4 text-blue-600" />
                      <span className="text-sm font-medium text-gray-700">Unread Notifications</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="bg-blue-200 text-blue-800 px-2 py-1 rounded-full text-xs font-bold">
                        {notifications.filter((n: any) => !n.read).length}
                      </span>
                      <ExternalLink className="h-4 w-4 text-gray-400" />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Recent Activity with Enhanced UI */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200">
              <div className="px-6 py-4 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h3 className="text-xl font-bold text-gray-900 flex items-center">
                    <Activity className="h-5 w-5 text-indigo-500 mr-2" />
                    Recent System Activity
                  </h3>
                  <button 
                    onClick={() => setActiveTab('activities')}
                    className="text-indigo-600 hover:text-indigo-700 text-sm font-medium flex items-center space-x-1"
                  >
                    <span>View All</span>
                    <ExternalLink className="h-4 w-4" />
                  </button>
                </div>
              </div>
              <div className="p-6">
                <div className="space-y-4">
                  {reports?.recentActivity?.slice(0, 6).map((activity: any, index: number) => (
                    <div key={index} className="flex items-center space-x-4 p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                      <div className="flex-shrink-0">
                        <div className={`w-3 h-3 rounded-full ${
                          activity.type === 'booking' ? 'bg-blue-500' :
                          activity.type === 'user' ? 'bg-green-500' :
                          activity.type === 'salon' ? 'bg-purple-500' :
                          'bg-gray-500'
                        } animate-pulse`}></div>
                      </div>
                      <div className="min-w-0 flex-1">
                        <p className="text-sm font-medium text-gray-900">{activity.description}</p>
                        <div className="flex items-center space-x-2 mt-1">
                          <p className="text-xs text-gray-500">{activity.time}</p>
                          <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                            activity.type === 'booking' ? 'bg-blue-100 text-blue-800' :
                            activity.type === 'user' ? 'bg-green-100 text-green-800' :
                            activity.type === 'salon' ? 'bg-purple-100 text-purple-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {activity.type?.toUpperCase() || 'SYSTEM'}
                          </span>
                        </div>
                      </div>
                    </div>
                  )) || (
                    <div className="text-center py-12">
                      <Activity className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <p className="text-gray-500 text-lg font-medium">No recent activity</p>
                      <p className="text-gray-400 text-sm">System activities will appear here</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case 'bookings':
        return (
          <div className="space-y-6">
            {/* Booking Management Header */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200">
              <div className="px-6 py-4 border-b border-gray-200">
                <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
                  <div>
                    <h3 className="text-xl font-bold text-gray-900">Booking Management</h3>
                    <p className="text-gray-600 mt-1">Manage and monitor all salon bookings</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="bg-blue-100 text-blue-800 px-3 py-1.5 rounded-full text-sm font-semibold">
                      Total: {bookings.length}
                    </div>
                    <div className="bg-yellow-100 text-yellow-800 px-3 py-1.5 rounded-full text-sm font-semibold">
                      Pending: {bookings.filter((b: any) => b.status === 'pending').length}
                    </div>
                  </div>
                </div>
              </div>

              {/* Filters and Search */}
              <div className="p-6 border-b border-gray-200">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                    <input
                      type="text"
                      placeholder="Search bookings..."
                      value={bookingSearchTerm}
                      onChange={(e) => setBookingSearchTerm(e.target.value)}
                      className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent w-full"
                    />
                  </div>
                  <select
                    value={bookingStatusFilter}
                    onChange={(e) => setBookingStatusFilter(e.target.value)}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">All Status</option>
                    <option value="pending">Pending</option>
                    <option value="confirmed">Confirmed</option>
                    <option value="completed">Completed</option>
                    <option value="cancelled">Cancelled</option>
                  </select>
                  <input
                    type="date"
                    value={dateRange.startDate}
                    onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <input
                    type="date"
                    value={dateRange.endDate}
                    onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
            </div>

            {/* Bookings Table */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              {bookingsLoading ? (
                <div className="flex justify-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                </div>
              ) : bookings.length === 0 ? (
                <div className="text-center py-12">
                  <Calendar className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No bookings found</h3>
                  <p className="mt-1 text-sm text-gray-500">No bookings match your current filters.</p>
                </div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200">
                    <thead className="bg-gray-50">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Booking ID
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Client
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Salon
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Service
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Date & Time
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Amount
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Status
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {bookings.map((booking: any) => (
                        <tr key={booking._id} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {booking.bookingId}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="flex-shrink-0 h-8 w-8">
                                <div className="h-8 w-8 rounded-full bg-gray-200 flex items-center justify-center">
                                  {booking.client?.name?.[0]?.toUpperCase() || 'U'}
                                </div>
                              </div>
                              <div className="ml-3">
                                <div className="text-sm font-medium text-gray-900">
                                  {booking.client?.name || 'Unknown'}
                                </div>
                                <div className="text-sm text-gray-500">
                                  {booking.client?.email || ''}
                                </div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {booking.salon?.name || 'Unknown Salon'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {booking.service?.name || 'Unknown Service'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            <div className="flex items-center space-x-2">
                              <Calendar className="h-4 w-4 text-gray-400" />
                              <div>
                                <div>{new Date(booking.date).toLocaleDateString()}</div>
                                <div className="text-xs text-gray-500">
                                  {new Date(booking.timeSlot).toLocaleTimeString()}
                                </div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            <div>
                              <div className="font-medium">{booking.amountTotal} RWF</div>
                              <div className="text-xs text-gray-500">
                                {booking.paymentStatus === 'paid' ? 'Paid' : 
                                 booking.paymentStatus === 'partial' ? `Partial (${booking.depositPaid} RWF)` : 
                                 'Unpaid'}
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                              booking.status === 'completed' ? 'bg-green-100 text-green-800' :
                              booking.status === 'confirmed' ? 'bg-blue-100 text-blue-800' :
                              booking.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-red-100 text-red-800'
                            }`}>
                              {booking.status}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                            {booking.status === 'pending' && (
                              <>
                                <button
                                  onClick={() => updateBookingStatusMutation.mutate({ 
                                    id: booking._id, 
                                    status: 'confirmed' 
                                  })}
                                  className="text-green-600 hover:text-green-900"
                                  disabled={updateBookingStatusMutation.isPending}
                                >
                                  Confirm
                                </button>
                                <button
                                  onClick={() => updateBookingStatusMutation.mutate({ 
                                    id: booking._id, 
                                    status: 'cancelled' 
                                  })}
                                  className="text-red-600 hover:text-red-900"
                                  disabled={updateBookingStatusMutation.isPending}
                                >
                                  Cancel
                                </button>
                              </>
                            )}
                            {booking.status === 'confirmed' && (
                              <button
                                onClick={() => updateBookingStatusMutation.mutate({ 
                                  id: booking._id, 
                                  status: 'completed' 
                                })}
                                className="text-blue-600 hover:text-blue-900"
                                disabled={updateBookingStatusMutation.isPending}
                              >
                                Complete
                              </button>
                            )}
                            <button
                              onClick={() => {/* View details logic */}}
                              className="text-gray-600 hover:text-gray-900"
                            >
                              <Eye className="h-4 w-4" />
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        );

      case 'analytics':
        return (
          <div className="space-y-6">
            {/* Analytics Header */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex justify-between items-center mb-6">
                <div>
                  <h3 className="text-xl font-bold text-gray-900">Analytics Dashboard</h3>
                  <p className="text-gray-600 mt-1">Comprehensive insights and metrics</p>
                </div>
                <div className="flex items-center space-x-2">
                  <button className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                    <Download className="h-4 w-4" />
                    <span>Export</span>
                  </button>
                </div>
              </div>

              {/* Analytics Grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div className="bg-gradient-to-r from-blue-50 to-blue-100 p-6 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-blue-600">Total Revenue</p>
                      <p className="text-2xl font-bold text-blue-900">
                        {analytics.totalRevenue?.toLocaleString() || 0} RWF
                      </p>
                    </div>
                    <DollarSign className="h-8 w-8 text-blue-600" />
                  </div>
                  <div className="mt-4 flex items-center text-sm">
                    <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
                    <span className="text-green-600">+12% from last month</span>
                  </div>
                </div>

                <div className="bg-gradient-to-r from-green-50 to-green-100 p-6 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-green-600">Total Bookings</p>
                      <p className="text-2xl font-bold text-green-900">
                        {analytics.totalBookings || bookings.length}
                      </p>
                    </div>
                    <Calendar className="h-8 w-8 text-green-600" />
                  </div>
                  <div className="mt-4 flex items-center text-sm">
                    <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
                    <span className="text-green-600">+8% from last month</span>
                  </div>
                </div>

                <div className="bg-gradient-to-r from-purple-50 to-purple-100 p-6 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-purple-600">Active Salons</p>
                      <p className="text-2xl font-bold text-purple-900">
                        {analytics.activeSalons || reports?.summary?.totalSalons || 0}
                      </p>
                    </div>
                    <Building2 className="h-8 w-8 text-purple-600" />
                  </div>
                  <div className="mt-4 flex items-center text-sm">
                    <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
                    <span className="text-green-600">+5% from last month</span>
                  </div>
                </div>

                <div className="bg-gradient-to-r from-orange-50 to-orange-100 p-6 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-orange-600">Customer Satisfaction</p>
                      <p className="text-2xl font-bold text-orange-900">
                        {analytics.satisfaction || '4.8'}/5.0
                      </p>
                    </div>
                    <Users className="h-8 w-8 text-orange-600" />
                  </div>
                  <div className="mt-4 flex items-center text-sm">
                    <TrendingUp className="h-4 w-4 text-green-500 mr-1" />
                    <span className="text-green-600">+0.2 from last month</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Charts Section */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Booking Trends Chart */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold text-gray-900">Booking Trends</h4>
                  <LineChart className="h-5 w-5 text-gray-400" />
                </div>
                <div className="h-64 flex items-center justify-center bg-gray-50 rounded-lg">
                  <div className="text-center">
                    <TrendingUp className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                    <p className="text-gray-500">Chart visualization would appear here</p>
                  </div>
                </div>
              </div>

              {/* Revenue Distribution */}
              <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="text-lg font-semibold text-gray-900">Revenue by Service</h4>
                  <PieChart className="h-5 w-5 text-gray-400" />
                </div>
                <div className="h-64 flex items-center justify-center bg-gray-50 rounded-lg">
                  <div className="text-center">
                    <PieChart className="h-12 w-12 text-gray-400 mx-auto mb-2" />
                    <p className="text-gray-500">Pie chart visualization would appear here</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Performance Metrics */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <h4 className="text-lg font-semibold text-gray-900 mb-4">Performance Metrics</h4>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="text-center p-4 border border-gray-200 rounded-lg">
                  <div className="text-2xl font-bold text-gray-900">
                    {Math.round((bookings.filter((b: any) => b.status === 'completed').length / bookings.length) * 100) || 0}%
                  </div>
                  <div className="text-sm text-gray-600 mt-1">Completion Rate</div>
                </div>
                <div className="text-center p-4 border border-gray-200 rounded-lg">
                  <div className="text-2xl font-bold text-gray-900">
                    {Math.round((bookings.filter((b: any) => b.status === 'cancelled').length / bookings.length) * 100) || 0}%
                  </div>
                  <div className="text-sm text-gray-600 mt-1">Cancellation Rate</div>
                </div>
                <div className="text-center p-4 border border-gray-200 rounded-lg">
                  <div className="text-2xl font-bold text-gray-900">
                    {analytics.avgBookingValue || 
                     Math.round(bookings.reduce((sum: number, b: any) => sum + b.amountTotal, 0) / bookings.length) || 0} RWF
                  </div>
                  <div className="text-sm text-gray-600 mt-1">Avg. Booking Value</div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'activities':
        return (
          <div className="space-y-6">
            {/* Activities Header */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="text-xl font-bold text-gray-900">System Activities</h3>
                  <p className="text-gray-600 mt-1">Monitor all system activities and user actions</p>
                </div>
                <div className="flex items-center space-x-2">
                  <button className="flex items-center space-x-2 bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200">
                    <Filter className="h-4 w-4" />
                    <span>Filter</span>
                  </button>
                </div>
              </div>
            </div>

            {/* Activities Timeline */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200">
              <div className="p-6">
                <div className="space-y-6">
                  {reports?.recentActivity?.map((activity: any, index: number) => (
                    <div key={index} className="flex items-start space-x-4">
                      <div className="flex-shrink-0">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <Activity className="h-4 w-4 text-blue-600" />
                        </div>
                      </div>
                      <div className="min-w-0 flex-1">
                        <div className="flex items-center justify-between">
                          <p className="text-sm font-medium text-gray-900">
                            {activity.description}
                          </p>
                          <p className="text-sm text-gray-500">
                            {activity.time}
                          </p>
                        </div>
                        <p className="text-sm text-gray-600 mt-1">
                          {activity.details || 'No additional details available'}
                        </p>
                      </div>
                    </div>
                  )) || (
                    <div className="text-center py-12">
                      <Activity className="mx-auto h-12 w-12 text-gray-400" />
                      <h3 className="mt-2 text-sm font-medium text-gray-900">No activities found</h3>
                      <p className="mt-1 text-sm text-gray-500">System activities will appear here when available.</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case 'notifications':
        return (
          <div className="space-y-6">
            {/* Notifications Header */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="text-xl font-bold text-gray-900">Notifications</h3>
                  <p className="text-gray-600 mt-1">Manage system notifications</p>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => markAllNotificationsReadMutation.mutate()}
                    className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
                    disabled={markAllNotificationsReadMutation.isPending}
                  >
                    <CheckCircle className="h-4 w-4" />
                    <span>Mark All Read</span>
                  </button>
                </div>
              </div>
            </div>

            {/* Notifications List */}
            <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
              {notificationsLoading ? (
                <div className="flex justify-center py-12">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                </div>
              ) : notifications.length === 0 ? (
                <div className="text-center py-12">
                  <Bell className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No notifications</h3>
                  <p className="mt-1 text-sm text-gray-500">You're all caught up!</p>
                </div>
              ) : (
                <div className="divide-y divide-gray-200">
                  {notifications.map((notification: any) => (
                    <div 
                      key={notification._id} 
                      className={`p-6 hover:bg-gray-50 transition-colors ${
                        !notification.read ? 'bg-blue-50' : ''
                      }`}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-3">
                          <div className={`flex-shrink-0 w-2 h-2 rounded-full mt-2 ${
                            !notification.read ? 'bg-blue-500' : 'bg-gray-300'
                          }`}></div>
                          <div className="min-w-0 flex-1">
                            <div className="flex items-center space-x-2">
                              <h4 className={`text-sm font-medium ${
                                !notification.read ? 'text-gray-900' : 'text-gray-700'
                              }`}>
                                {notification.payload.title}
                              </h4>
                              <span className={`inline-flex items-center px-2 py-1 text-xs rounded-full ${
                                notification.type === 'booking_created' ? 'bg-green-100 text-green-800' :
                                notification.type === 'booking_cancelled' ? 'bg-red-100 text-red-800' :
                                notification.type === 'payment_received' ? 'bg-blue-100 text-blue-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {notification.type.replace('_', ' ')}
                              </span>
                            </div>
                            <p className="text-sm text-gray-600 mt-1">
                              {notification.payload.message}
                            </p>
                            <p className="text-xs text-gray-500 mt-2">
                              {new Date(notification.createdAt).toLocaleString()}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {!notification.read && (
                            <button
                              onClick={() => markNotificationReadMutation.mutate(notification._id)}
                              className="text-blue-600 hover:text-blue-900 text-sm"
                              disabled={markNotificationReadMutation.isPending}
                            >
                              Mark as read
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        );

      case 'salons':
        return (
          <div className="space-y-4 sm:space-y-6">
            {/* Enhanced Mobile-Responsive Salon Verification */}
            <div className="bg-gradient-to-br from-white via-white to-amber-50/50 backdrop-blur-sm rounded-2xl lg:rounded-3xl shadow-lg shadow-slate-200/50 border border-slate-200/60 overflow-hidden">
              <div className="px-4 sm:px-6 py-4 lg:py-6 border-b border-slate-200/60 bg-gradient-to-r from-amber-50 to-orange-50/30">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                  <div>
                    <h3 className="text-lg lg:text-xl font-bold text-slate-900">Salon Verification</h3>
                    <p className="text-sm text-slate-600 mt-1">Review and verify salon applications</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="flex items-center space-x-1 px-3 py-1.5 bg-amber-100 text-amber-700 rounded-full text-xs lg:text-sm font-semibold">
                      <Building2 className="h-3 w-3 lg:h-4 lg:w-4" />
                      <span>{pendingSalons?.length || 0} pending</span>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Mobile Card Layout */}
              <div className="block sm:hidden">
                <div className="space-y-3 p-4">
                  {salonsLoading ? (
                    <div className="flex justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-600"></div>
                    </div>
                  ) : pendingSalons?.length > 0 ? (
                    pendingSalons.map((salon: any) => (
                      <div key={salon._id} className="group bg-gradient-to-r from-white to-amber-50/50 rounded-2xl p-4 border border-slate-200/60 hover:shadow-lg hover:shadow-amber-500/10 transition-all duration-300 hover:-translate-y-1 hover:scale-[1.02]">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-3">
                            <div className="relative">
                              <div className="h-12 w-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg">
                                <Building2 className="h-6 w-6 text-white" />
                              </div>
                              <div className="absolute -bottom-1 -right-1 h-4 w-4 bg-amber-500 border-2 border-white rounded-full flex items-center justify-center">
                                <div className="h-2 w-2 bg-white rounded-full animate-pulse"></div>
                              </div>
                            </div>
                            <div className="min-w-0 flex-1">
                              <div className="text-sm font-semibold text-slate-900 truncate">{salon.name}</div>
                              <div className="text-xs text-slate-500 truncate">{salon.email}</div>
                            </div>
                          </div>
                          <span className="inline-flex items-center px-2.5 py-1 text-xs font-semibold rounded-full bg-gradient-to-r from-amber-100 to-amber-200 text-amber-800">
                            ⏳ Pending
                          </span>
                        </div>
                        <div className="mb-3">
                          <div className="text-xs text-slate-600 mb-1">
                            <span className="font-medium">Owner:</span> {salon.owner?.name}
                          </div>
                          <div className="text-xs text-slate-500 mb-1">
                            <span className="font-medium">Contact:</span> {salon.owner?.email}
                          </div>
                          <div className="text-xs text-slate-500 flex items-center">
                            <span className="mr-2">📍</span>
                            {salon.address}
                          </div>
                        </div>
                        <div className="flex justify-end space-x-2">
                          <button
                            onClick={() => verifySalonMutation.mutate({ id: salon._id, verified: true })}
                            disabled={verifySalonMutation.isPending}
                            className="flex items-center px-3 py-1.5 bg-emerald-50 text-emerald-700 rounded-lg hover:bg-emerald-100 transition-colors disabled:opacity-50 text-xs font-medium"
                          >
                            <CheckCircle className="h-3 w-3 mr-1" />
                            Approve
                          </button>
                          <button
                            onClick={() => verifySalonMutation.mutate({ id: salon._id, verified: false })}
                            disabled={verifySalonMutation.isPending}
                            className="flex items-center px-3 py-1.5 bg-red-50 text-red-700 rounded-lg hover:bg-red-100 transition-colors disabled:opacity-50 text-xs font-medium"
                          >
                            <XCircle className="h-3 w-3 mr-1" />
                            Reject
                          </button>
                          <button 
                            onClick={() => {
                              setSelectedSalonId(salon._id);
                              setShowSalonDetailsModal(true);
                            }}
                            className="p-1.5 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-colors"
                          >
                            <Eye className="h-3 w-3" />
                          </button>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-12">
                      <Building2 className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                      <p className="text-slate-500 text-lg font-medium">No pending verifications</p>
                      <p className="text-slate-400 text-sm mt-1">All salons have been reviewed</p>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Desktop Table Layout */}
              <div className="hidden sm:block overflow-x-auto">
                <table className="min-w-full divide-y divide-slate-200/60">
                  <thead className="bg-gradient-to-r from-amber-50 to-orange-50/50">
                    <tr>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Salon
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Owner
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Location
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Status
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-slate-200/60">
                    {salonsLoading ? (
                      <tr>
                        <td colSpan={5} className="px-6 py-12 text-center">
                          <div className="flex flex-col items-center">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600 mb-4"></div>
                            <p className="text-slate-600">Loading salon verifications...</p>
                          </div>
                        </td>
                      </tr>
                    ) : pendingSalons?.length > 0 ? (
                      pendingSalons.map((salon: any, index: number) => (
                        <tr 
                          key={salon._id} 
                          className="group hover:bg-gradient-to-r hover:from-amber-50/50 hover:to-orange-50/30 transition-all duration-200"
                          style={{
                            animationDelay: `${index * 50}ms`,
                            animation: 'slideInUp 0.5s ease-out forwards'
                          }}
                        >
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="relative">
                                <div className="h-12 w-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-amber-500/25 transition-shadow">
                                  <Building2 className="h-6 w-6 text-white" />
                                </div>
                                <div className="absolute -bottom-1 -right-1 h-4 w-4 bg-amber-500 border-2 border-white rounded-full animate-pulse"></div>
                              </div>
                              <div className="ml-4">
                                <div className="text-sm font-semibold text-slate-900">{salon.name}</div>
                                <div className="text-sm text-slate-500">{salon.email}</div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm font-medium text-slate-900">{salon.owner?.name}</div>
                            <div className="text-sm text-slate-500">{salon.owner?.email}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-slate-900 flex items-center">
                              <span className="mr-2">📍</span>
                              {salon.address}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className="inline-flex items-center px-3 py-1.5 text-xs font-semibold rounded-full bg-gradient-to-r from-amber-100 to-amber-200 text-amber-800 shadow-sm">
                              ⏳ Pending Verification
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div className="flex items-center space-x-3">
                              <button
                                onClick={() => verifySalonMutation.mutate({ id: salon._id, verified: true })}
                                disabled={verifySalonMutation.isPending}
                                className="group/btn p-2 text-emerald-600 hover:text-emerald-800 hover:bg-emerald-50 rounded-lg transition-all duration-200 hover:scale-110 disabled:opacity-50 disabled:cursor-not-allowed"
                                title="Approve salon"
                              >
                                <CheckCircle className="h-5 w-5 group-hover/btn:scale-110 transition-transform" />
                              </button>
                              <button
                                onClick={() => verifySalonMutation.mutate({ id: salon._id, verified: false })}
                                disabled={verifySalonMutation.isPending}
                                className="group/btn p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-lg transition-all duration-200 hover:scale-110 disabled:opacity-50 disabled:cursor-not-allowed"
                                title="Reject salon"
                              >
                                <XCircle className="h-5 w-5 group-hover/btn:scale-110 transition-transform" />
                              </button>
                              <button 
                                onClick={() => {
                                  setSelectedSalonId(salon._id);
                                  setShowSalonDetailsModal(true);
                                }}
                                className="group/btn p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-all duration-200 hover:scale-110"
                                title="View details"
                              >
                                <Eye className="h-5 w-5 group-hover/btn:scale-110 transition-transform" />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan={5} className="px-6 py-12 text-center">
                          <Building2 className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                          <p className="text-slate-500 text-lg font-medium">No pending salon verifications</p>
                          <p className="text-slate-400 text-sm mt-1">All salon applications have been processed</p>
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );

      case 'users':
        return (
          <div className="space-y-4 sm:space-y-6">
            {/* Enhanced Mobile-Responsive Search and Filter */}
            <div className="bg-gradient-to-r from-white via-white to-blue-50/30 backdrop-blur-sm rounded-2xl lg:rounded-3xl shadow-lg shadow-slate-200/50 border border-slate-200/60 p-4 sm:p-6">
              <div className="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:gap-4">
                <div className="flex-1">
                  <div className="relative group">
                    <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 h-4 w-4 lg:h-5 lg:w-5 text-slate-400 group-focus-within:text-blue-500 transition-colors" />
                    <input
                      type="text"
                      placeholder="Search users by name or email..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full pl-10 lg:pl-12 pr-4 py-3 lg:py-4 text-sm lg:text-base bg-white/80 border border-slate-300/60 rounded-xl lg:rounded-2xl focus:ring-2 focus:ring-blue-500/60 focus:border-blue-500/60 focus:bg-white transition-all duration-300 placeholder:text-slate-400"
                    />
                  </div>
                </div>
                <div className="w-full sm:w-48">
                  <div className="relative">
                    <Filter className="absolute left-4 top-1/2 transform -translate-y-1/2 h-4 w-4 text-slate-400" />
                    <select
                      value={selectedRole}
                      onChange={(e) => setSelectedRole(e.target.value)}
                      className="w-full pl-10 lg:pl-12 pr-4 py-3 lg:py-4 text-sm lg:text-base bg-white/80 border border-slate-300/60 rounded-xl lg:rounded-2xl focus:ring-2 focus:ring-blue-500/60 focus:border-blue-500/60 focus:bg-white transition-all duration-300 appearance-none"
                    >
                      <option value="">All Roles</option>
                      <option value="client">👤 Client</option>
                      <option value="barber">✂️ Barber</option>
                      <option value="owner">🏢 Owner</option>
                    </select>
                    <div className="absolute right-4 top-1/2 transform -translate-y-1/2 pointer-events-none">
                      <svg className="h-4 w-4 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Enhanced User Management */}
            <div className="bg-gradient-to-br from-white via-white to-slate-50/50 backdrop-blur-sm rounded-2xl lg:rounded-3xl shadow-lg shadow-slate-200/50 border border-slate-200/60 overflow-hidden">
              <div className="px-4 sm:px-6 py-4 lg:py-6 border-b border-slate-200/60 bg-gradient-to-r from-slate-50 to-blue-50/30">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                  <div>
                    <h3 className="text-lg lg:text-xl font-bold text-slate-900">User Management</h3>
                    <p className="text-sm text-slate-600 mt-1">Manage and monitor platform users</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="flex items-center space-x-1 px-3 py-1.5 bg-blue-100 text-blue-700 rounded-full text-xs lg:text-sm font-semibold">
                      <Users className="h-3 w-3 lg:h-4 lg:w-4" />
                      <span>{users?.length || 0} users</span>
                    </div>
                    <button
                      onClick={() => setShowCreateUserModal(true)}
                      className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium"
                    >
                      <Plus className="h-4 w-4" />
                      <span>Create User</span>
                    </button>
                  </div>
                </div>
              </div>
              
              {/* Mobile Card Layout */}
              <div className="block sm:hidden">
                <div className="space-y-3 p-4">
                  {usersLoading ? (
                    <div className="flex justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    </div>
                  ) : users?.length > 0 ? (
                    users.map((user: any) => (
                      <div key={user._id} className="group bg-gradient-to-r from-white to-slate-50/50 rounded-2xl p-4 border border-slate-200/60 hover:shadow-lg hover:shadow-blue-500/10 transition-all duration-300 hover:-translate-y-1 hover:scale-[1.02]">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-3">
                            <div className="relative">
                              <div className="h-12 w-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                                <span className="text-white font-bold text-sm">
                                  {user.name.charAt(0).toUpperCase()}
                                </span>
                              </div>
                              <div className="absolute -bottom-1 -right-1 h-4 w-4 bg-emerald-500 border-2 border-white rounded-full flex items-center justify-center">
                                <div className="h-2 w-2 bg-white rounded-full"></div>
                              </div>
                            </div>
                            <div className="min-w-0 flex-1">
                              <div className="text-sm font-semibold text-slate-900 truncate">{user.name}</div>
                              <div className="text-xs text-slate-500 truncate">{user.email}</div>
                            </div>
                          </div>
                          <div className="flex space-x-2">
                            <button className="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-colors">
                              <Eye className="h-4 w-4" />
                            </button>
                          </div>
                        </div>
                        <div className="flex flex-wrap gap-2 mb-3">
                          <span className={`inline-flex items-center px-2.5 py-1 text-xs font-semibold rounded-full ${
                            user.role === 'admin' ? 'bg-gradient-to-r from-red-100 to-red-200 text-red-800' :
                            user.role === 'owner' ? 'bg-gradient-to-r from-purple-100 to-purple-200 text-purple-800' :
                            user.role === 'barber' ? 'bg-gradient-to-r from-blue-100 to-blue-200 text-blue-800' :
                            'bg-gradient-to-r from-slate-100 to-slate-200 text-slate-800'
                          }`}>
                            {user.role === 'owner' && '🏢 '}
                            {user.role === 'barber' && '✂️ '}
                            {user.role === 'client' && '👤 '}
                            {user.role === 'admin' && '🛡️ '}
                            {user.role}
                          </span>
                          <span className={`inline-flex items-center px-2.5 py-1 text-xs font-semibold rounded-full ${
                            user.isVerified ? 'bg-gradient-to-r from-emerald-100 to-emerald-200 text-emerald-800' : 'bg-gradient-to-r from-amber-100 to-amber-200 text-amber-800'
                          }`}>
                            {user.isVerified ? '✅ Verified' : '⏳ Pending'}
                          </span>
                        </div>
                        <div className="text-xs text-slate-500 flex items-center">
                          <span className="mr-2">📅</span>
                          Joined: {new Date(user.createdAt).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric' 
                          })}
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-12">
                      <Users className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                      <p className="text-slate-500 text-lg font-medium">No users found</p>
                      <p className="text-slate-400 text-sm mt-1">Try adjusting your search or filters</p>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Desktop Table Layout */}
              <div className="hidden sm:block overflow-x-auto">
                <table className="min-w-full divide-y divide-slate-200/60">
                  <thead className="bg-gradient-to-r from-slate-50 to-slate-100/50">
                    <tr>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        User
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Role
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Status
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Joined
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-slate-200/60">
                    {usersLoading ? (
                      <tr>
                        <td colSpan={5} className="px-6 py-12 text-center">
                          <div className="flex flex-col items-center">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mb-4"></div>
                            <p className="text-slate-600">Loading users...</p>
                          </div>
                        </td>
                      </tr>
                    ) : users?.length > 0 ? (
                      users.map((user: any, index: number) => (
                        <tr 
                          key={user._id} 
                          className="group hover:bg-gradient-to-r hover:from-slate-50 hover:to-blue-50/30 transition-all duration-200"
                          style={{
                            animationDelay: `${index * 50}ms`,
                            animation: 'slideInUp 0.5s ease-out forwards'
                          }}
                        >
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="relative">
                                <div className="h-12 w-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-blue-500/25 transition-shadow">
                                  <span className="text-white font-bold text-sm">
                                    {user.name.charAt(0).toUpperCase()}
                                  </span>
                                </div>
                                <div className="absolute -bottom-1 -right-1 h-4 w-4 bg-emerald-500 border-2 border-white rounded-full"></div>
                              </div>
                              <div className="ml-4">
                                <div className="text-sm font-semibold text-slate-900">{user.name}</div>
                                <div className="text-sm text-slate-500">{user.email}</div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex items-center px-3 py-1.5 text-xs font-semibold rounded-full shadow-sm ${
                              user.role === 'admin' ? 'bg-gradient-to-r from-red-100 to-red-200 text-red-800' :
                              user.role === 'owner' ? 'bg-gradient-to-r from-purple-100 to-purple-200 text-purple-800' :
                              user.role === 'barber' ? 'bg-gradient-to-r from-blue-100 to-blue-200 text-blue-800' :
                              'bg-gradient-to-r from-slate-100 to-slate-200 text-slate-800'
                            }`}>
                              {user.role === 'owner' && '🏢 '}
                              {user.role === 'barber' && '✂️ '}
                              {user.role === 'client' && '👤 '}
                              {user.role === 'admin' && '🛡️ '}
                              {user.role}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex items-center px-3 py-1.5 text-xs font-semibold rounded-full shadow-sm ${
                              user.isVerified ? 'bg-gradient-to-r from-emerald-100 to-emerald-200 text-emerald-800' : 'bg-gradient-to-r from-amber-100 to-amber-200 text-amber-800'
                            }`}>
                              {user.isVerified ? '✅ Verified' : '⏳ Pending'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600 font-medium">
                            {new Date(user.createdAt).toLocaleDateString('en-US', { 
                              year: 'numeric', 
                              month: 'short', 
                              day: 'numeric' 
                            })}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div className="flex items-center space-x-3">
                              <button className="group/btn p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-all duration-200 hover:scale-110">
                                <Eye className="h-5 w-5 group-hover/btn:scale-110 transition-transform" />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan={5} className="px-6 py-12 text-center">
                          <Users className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                          <p className="text-slate-500 text-lg font-medium">No users found</p>
                          <p className="text-slate-400 text-sm mt-1">Try adjusting your search or filters</p>
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );

      case 'owners':
        return (
          <div className="space-y-4 sm:space-y-6">
            {/* Salon Owners Management */}
            <div className="bg-gradient-to-br from-white via-white to-emerald-50/50 backdrop-blur-sm rounded-2xl lg:rounded-3xl shadow-lg shadow-slate-200/50 border border-slate-200/60 overflow-hidden">
              <div className="px-4 sm:px-6 py-4 lg:py-6 border-b border-slate-200/60 bg-gradient-to-r from-emerald-50 to-teal-50/30">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                  <div>
                    <h3 className="text-lg lg:text-xl font-bold text-slate-900">Salon Owners</h3>
                    <p className="text-sm text-slate-600 mt-1">Create and manage salon owners</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button
                      onClick={() => setShowCreateUserModal(true)}
                      className="flex items-center space-x-2 px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors text-sm font-medium"
                    >
                      <Plus className="h-4 w-4" />
                      <span>Create User</span>
                    </button>
                  </div>
                </div>
              </div>
              
              {/* Search */}
              <div className="p-4 sm:p-6 border-b border-slate-200/60">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-5 w-5" />
                  <input
                    type="text"
                    placeholder="Search owners by name or email..."
                    value={ownerSearchTerm}
                    onChange={(e) => setOwnerSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                  />
                </div>
              </div>

              {/* Mobile Card Layout */}
              <div className="block sm:hidden">
                <div className="space-y-3 p-4">
                  {ownersLoading ? (
                    <div className="flex justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"></div>
                    </div>
                  ) : owners?.length > 0 ? (
                    owners.map((owner: any) => (
                      <div key={owner._id} className="group bg-gradient-to-r from-white to-emerald-50/50 rounded-2xl p-4 border border-slate-200/60 hover:shadow-lg hover:shadow-emerald-500/10 transition-all duration-300 hover:-translate-y-1 hover:scale-[1.02]">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-3">
                            <div className="relative">
                              <div className="h-12 w-12 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center shadow-lg">
                                <span className="text-white font-bold text-sm">
                                  {owner.name.charAt(0).toUpperCase()}
                                </span>
                              </div>
                              <div className="absolute -bottom-1 -right-1 h-4 w-4 bg-emerald-500 border-2 border-white rounded-full flex items-center justify-center">
                                <div className="h-2 w-2 bg-white rounded-full"></div>
                              </div>
                            </div>
                            <div className="min-w-0 flex-1">
                              <div className="text-sm font-semibold text-slate-900 truncate">{owner.name}</div>
                              <div className="text-xs text-slate-500 truncate">{owner.email}</div>
                            </div>
                          </div>
                          <span className={`inline-flex items-center px-2.5 py-1 text-xs font-semibold rounded-full ${
                            owner.isVerified ? 'bg-gradient-to-r from-emerald-100 to-emerald-200 text-emerald-800' : 'bg-gradient-to-r from-amber-100 to-amber-200 text-amber-800'
                          }`}>
                            {owner.isVerified ? '✅ Verified' : '⏳ Pending'}
                          </span>
                        </div>
                        <div className="mb-3">
                          <div className="text-xs text-slate-600 mb-1">
                            <span className="font-medium">Phone:</span> {owner.phone}
                          </div>
                          <div className="text-xs text-slate-500 flex items-center">
                            <span className="mr-2">📅</span>
                            Joined: {new Date(owner.createdAt).toLocaleDateString('en-US', { 
                              year: 'numeric', 
                              month: 'short', 
                              day: 'numeric' 
                            })}
                          </div>
                        </div>
                        <div className="flex justify-end space-x-2">
                          <button className="p-1.5 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-colors">
                            <Eye className="h-3 w-3" />
                          </button>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-12">
                      <Users className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                      <p className="text-slate-500 text-lg font-medium">No salon owners found</p>
                      <p className="text-slate-400 text-sm mt-1">Create your first salon owner to get started</p>
                    </div>
                  )}
                </div>
              </div>
              
              {/* Desktop Table Layout */}
              <div className="hidden sm:block overflow-x-auto">
                <table className="min-w-full divide-y divide-slate-200/60">
                  <thead className="bg-gradient-to-r from-emerald-50 to-teal-50/50">
                    <tr>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Owner
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Contact
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Status
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Joined
                      </th>
                      <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-slate-200/60">
                    {ownersLoading ? (
                      <tr>
                        <td colSpan={5} className="px-6 py-12 text-center">
                          <div className="flex flex-col items-center">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-emerald-600 mb-4"></div>
                            <p className="text-slate-600">Loading owners...</p>
                          </div>
                        </td>
                      </tr>
                    ) : owners?.length > 0 ? (
                      owners.map((owner: any, index: number) => (
                        <tr 
                          key={owner._id} 
                          className="group hover:bg-gradient-to-r hover:from-slate-50 hover:to-emerald-50/30 transition-all duration-200"
                          style={{
                            animationDelay: `${index * 50}ms`,
                            animation: 'slideInUp 0.5s ease-out forwards'
                          }}
                        >
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex items-center">
                              <div className="relative">
                                <div className="h-12 w-12 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center shadow-lg group-hover:shadow-emerald-500/25 transition-shadow">
                                  <span className="text-white font-bold text-sm">
                                    {owner.name.charAt(0).toUpperCase()}
                                  </span>
                                </div>
                                <div className="absolute -bottom-1 -right-1 h-4 w-4 bg-emerald-500 border-2 border-white rounded-full"></div>
                              </div>
                              <div className="ml-4">
                                <div className="text-sm font-semibold text-slate-900">{owner.name}</div>
                                <div className="text-sm text-slate-500">{owner.email}</div>
                              </div>
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="text-sm text-slate-900">{owner.phone}</div>
                            <div className="text-sm text-slate-500">{owner.email}</div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`inline-flex items-center px-3 py-1.5 text-xs font-semibold rounded-full shadow-sm ${
                              owner.isVerified ? 'bg-gradient-to-r from-emerald-100 to-emerald-200 text-emerald-800' : 'bg-gradient-to-r from-amber-100 to-amber-200 text-amber-800'
                            }`}>
                              {owner.isVerified ? '✅ Verified' : '⏳ Pending'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600 font-medium">
                            {new Date(owner.createdAt).toLocaleDateString('en-US', { 
                              year: 'numeric', 
                              month: 'short', 
                              day: 'numeric' 
                            })}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div className="flex items-center space-x-3">
                              <button className="group/btn p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-lg transition-all duration-200 hover:scale-110">
                                <Eye className="h-5 w-5 group-hover/btn:scale-110 transition-transform" />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan={5} className="px-6 py-12 text-center">
                          <Users className="h-16 w-16 text-slate-300 mx-auto mb-4" />
                          <p className="text-slate-500 text-lg font-medium">No salon owners found</p>
                          <p className="text-slate-400 text-sm mt-1">Create your first salon owner to get started</p>
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        );

      case 'reports':
        return (
          <div className="space-y-4 sm:space-y-6">
            {/* Enhanced Reports Section */}
            <div className="bg-gradient-to-br from-white via-white to-purple-50/50 backdrop-blur-sm rounded-2xl lg:rounded-3xl shadow-lg shadow-slate-200/50 border border-slate-200/60 overflow-hidden">
              <div className="px-4 sm:px-6 py-4 lg:py-6 border-b border-slate-200/60 bg-gradient-to-r from-purple-50 to-indigo-50/30">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                  <div>
                    <h3 className="text-lg lg:text-xl font-bold text-slate-900">System Reports</h3>
                    <p className="text-sm text-slate-600 mt-1">Analytics and insights dashboard</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="flex items-center space-x-1 px-3 py-1.5 bg-purple-100 text-purple-700 rounded-full text-xs lg:text-sm font-semibold">
                      <BarChart3 className="h-3 w-3 lg:h-4 lg:w-4" />
                      <span>Analytics</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="p-6 lg:p-8">
                <div className="text-center py-12">
                  <div className="relative">
                    <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-purple-500 to-indigo-600 rounded-3xl shadow-xl mb-6">
                      <BarChart3 className="h-10 w-10 text-white" />
                    </div>
                    <div className="absolute -top-2 -right-2 w-6 h-6 bg-gradient-to-r from-amber-400 to-orange-500 rounded-full flex items-center justify-center">
                      <span className="text-white text-xs font-bold">!</span>
                    </div>
                  </div>
                  <h4 className="text-xl lg:text-2xl font-bold text-slate-900 mb-3">Coming Soon</h4>
                  <p className="text-slate-600 text-sm lg:text-base mb-6 max-w-md mx-auto">
                    Advanced analytics and detailed reports are currently in development. Stay tuned for comprehensive insights!
                  </p>
                  <div className="flex flex-col sm:flex-row items-center justify-center gap-3">
                    <div className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-purple-100 to-indigo-100 rounded-full text-sm font-medium text-purple-700">
                      <div className="w-2 h-2 bg-purple-500 rounded-full animate-pulse"></div>
                      <span>Feature in progress</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'notifications':
        return (
          <div className="space-y-4 sm:space-y-6">
            {/* Enhanced Notifications Section */}
            <div className="bg-gradient-to-br from-white via-white to-red-50/50 backdrop-blur-sm rounded-2xl lg:rounded-3xl shadow-lg shadow-slate-200/50 border border-slate-200/60 overflow-hidden">
              <div className="px-4 sm:px-6 py-4 lg:py-6 border-b border-slate-200/60 bg-gradient-to-r from-red-50 to-pink-50/30">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
                  <div>
                    <h3 className="text-lg lg:text-xl font-bold text-slate-900">Notification Center</h3>
                    <p className="text-sm text-slate-600 mt-1">Manage system notifications and alerts</p>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="flex items-center space-x-1 px-3 py-1.5 bg-red-100 text-red-700 rounded-full text-xs lg:text-sm font-semibold">
                      <Bell className="h-3 w-3 lg:h-4 lg:w-4" />
                      <span>Alerts</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="p-6 lg:p-8">
                <div className="text-center py-12">
                  <div className="relative">
                    <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-red-500 to-pink-600 rounded-3xl shadow-xl mb-6">
                      <Bell className="h-10 w-10 text-white animate-pulse" />
                    </div>
                    <div className="absolute -top-2 -right-2 w-6 h-6 bg-gradient-to-r from-amber-400 to-orange-500 rounded-full flex items-center justify-center animate-bounce">
                      <span className="text-white text-xs font-bold">!</span>
                    </div>
                  </div>
                  <h4 className="text-xl lg:text-2xl font-bold text-slate-900 mb-3">Notification System</h4>
                  <p className="text-slate-600 text-sm lg:text-base mb-6 max-w-md mx-auto">
                    Advanced notification management system is being developed. You'll be able to manage alerts, announcements, and system messages here.
                  </p>
                  <div className="flex flex-col sm:flex-row items-center justify-center gap-3">
                    <div className="flex items-center space-x-2 px-4 py-2 bg-gradient-to-r from-red-100 to-pink-100 rounded-full text-sm font-medium text-red-700">
                      <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse"></div>
                      <span>Under development</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  // Create User Modal Component
  const CreateUserModal = () => {
    const [formData, setFormData] = useState({
      name: '',
      email: '',
      phone: '',
      password: '',
      confirmPassword: '',
      role: 'client'
    });

    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      
      if (formData.password !== formData.confirmPassword) {
        toast.error('Passwords do not match');
        return;
      }

      if (!formData.name || !formData.email || !formData.phone || !formData.password) {
        toast.error('Please fill in all fields');
        return;
      }

      createUserMutation.mutate({
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        password: formData.password,
        role: formData.role
      });
    };

    const handleInputChange = (field: string, value: string) => {
      setFormData(prev => ({ ...prev, [field]: value }));
    };

    const resetForm = () => {
      setFormData({
        name: '',
        email: '',
        phone: '',
        password: '',
        confirmPassword: '',
        role: 'client'
      });
    };

    if (!showCreateUserModal) return null;

    return (
      <div className="fixed inset-0 z-50 overflow-y-auto bg-black/50 backdrop-blur-sm">
        <div className="flex items-start justify-center min-h-screen pt-8 px-4 pb-20 text-center">
          <div className="fixed inset-0 transition-opacity" aria-hidden="true">
            <div className="absolute inset-0 bg-black/30" onClick={() => {
              setShowCreateUserModal(false);
              resetForm();
            }}></div>
          </div>

          <div className="inline-block align-bottom bg-white rounded-2xl text-left overflow-hidden shadow-2xl transform transition-all w-full max-w-2xl relative">
            <form onSubmit={handleSubmit}>
              {/* Header */}
              <div className="bg-gradient-to-r from-blue-600 to-indigo-700 px-6 py-8">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="p-3 bg-white/20 rounded-xl backdrop-blur-sm">
                      <Users className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <h3 className="text-2xl font-bold text-white">Create New User</h3>
                      <p className="text-blue-100 mt-1">Add a new user to the system</p>
                    </div>
                  </div>
                  <button
                    type="button"
                    onClick={() => {
                      setShowCreateUserModal(false);
                      resetForm();
                    }}
                    className="p-2 hover:bg-white/20 rounded-lg transition-colors text-white"
                  >
                    <XCircle className="h-6 w-6" />
                  </button>
                </div>
              </div>

              {/* Form Content */}
              <div className="px-6 py-8 max-h-96 overflow-y-auto">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* User Role Selection */}
                  <div className="md:col-span-2">
                    <label htmlFor="role" className="block text-sm font-semibold text-gray-700 mb-3">User Role</label>
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                      {[
                        { value: 'client', label: 'Client', icon: Users },
                        { value: 'barber', label: 'Barber', icon: UserCheck },
                        { value: 'owner', label: 'Owner', icon: Briefcase },
                        { value: 'admin', label: 'Admin', icon: Shield },
                        { value: 'superadmin', label: 'Super Admin', icon: Award }
                      ].map((role) => {
                        const IconComponent = role.icon;
                        const isSelected = formData.role === role.value;
                        return (
                          <button
                            key={role.value}
                            type="button"
                            onClick={() => handleInputChange('role', role.value)}
                            className={`p-3 rounded-xl border-2 transition-all ${
                              isSelected
                                ? 'border-blue-500 bg-blue-50'
                                : 'border-gray-200 hover:border-gray-300 bg-white'
                            }`}
                          >
                            <IconComponent className={`h-6 w-6 mx-auto mb-2 ${
                              isSelected
                                ? 'text-blue-600'
                                : 'text-gray-400'
                            }`} />
                            <span className={`text-sm font-medium ${
                              isSelected
                                ? 'text-blue-700'
                                : 'text-gray-600'
                            }`}>
                              {role.label}
                            </span>
                          </button>
                        );
                      })}
                    </div>
                  </div>

                  {/* Personal Information */}
                  <div>
                    <label htmlFor="name" className="block text-sm font-semibold text-gray-700 mb-2">Full Name</label>
                    <input
                      type="text"
                      id="name"
                      value={formData.name}
                      onChange={(e) => handleInputChange('name', e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="Enter full name"
                      required
                    />
                  </div>
                  
                  <div>
                    <label htmlFor="email" className="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
                    <input
                      type="email"
                      id="email"
                      value={formData.email}
                      onChange={(e) => handleInputChange('email', e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="user@example.com"
                      required
                    />
                  </div>
                  
                  <div>
                    <label htmlFor="phone" className="block text-sm font-semibold text-gray-700 mb-2">Phone Number</label>
                    <input
                      type="tel"
                      id="phone"
                      value={formData.phone}
                      onChange={(e) => handleInputChange('phone', e.target.value)}
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      placeholder="+250788123456"
                      required
                    />
                  </div>
                  
                  <div>
                    <label htmlFor="password" className="block text-sm font-semibold text-gray-700 mb-2">Password</label>
                    <div className="relative">
                      <input
                        type={showPassword ? "text" : "password"}
                        id="password"
                        value={formData.password}
                        onChange={(e) => handleInputChange('password', e.target.value)}
                        className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Enter password (min 6 chars)"
                        minLength={6}
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowPassword(!showPassword)}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 focus:outline-none"
                      >
                        {showPassword ? (
                          <EyeOff className="h-5 w-5" />
                        ) : (
                          <Eye className="h-5 w-5" />
                        )}
                      </button>
                    </div>
                  </div>
                  
                  <div className="md:col-span-2">
                    <label htmlFor="confirmPassword" className="block text-sm font-semibold text-gray-700 mb-2">Confirm Password</label>
                    <div className="relative">
                      <input
                        type={showConfirmPassword ? "text" : "password"}
                        id="confirmPassword"
                        value={formData.confirmPassword}
                        onChange={(e) => handleInputChange('confirmPassword', e.target.value)}
                        className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-xl shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        placeholder="Confirm password"
                        minLength={6}
                        required
                      />
                      <button
                        type="button"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                        className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600 focus:outline-none"
                      >
                        {showConfirmPassword ? (
                          <EyeOff className="h-5 w-5" />
                        ) : (
                          <Eye className="h-5 w-5" />
                        )}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Footer */}
              <div className="bg-gray-50/50 px-6 py-6 border-t border-gray-200">
                <div className="flex flex-col-reverse sm:flex-row justify-end space-y-reverse space-y-3 sm:space-y-0 sm:space-x-3">
                  <button
                    type="button"
                    onClick={() => {
                      setShowCreateUserModal(false);
                      resetForm();
                    }}
                    className="w-full sm:w-auto px-6 py-3 border border-gray-300 rounded-xl text-gray-700 font-medium hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={createUserMutation.isPending}
                    className="w-full sm:w-auto px-6 py-3 bg-gradient-to-r from-blue-600 to-indigo-700 text-white font-medium rounded-xl hover:from-blue-700 hover:to-indigo-800 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center justify-center space-x-2"
                  >
                    {createUserMutation.isPending ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        <span>Creating...</span>
                      </>
                    ) : (
                      <>
                        <Plus className="h-4 w-4" />
                        <span>Create {formData.role.charAt(0).toUpperCase() + formData.role.slice(1)}</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    );
  };

  // Salon Details Modal Component
  const SalonDetailsModal = () => {
    if (!showSalonDetailsModal) return null;

    return (
      <div className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center p-4" style={{ zIndex: 9999 }}>
        <div className="bg-white rounded-3xl shadow-2xl max-w-5xl w-full max-h-[95vh] overflow-hidden">
          {/* Header */}
          <div className="bg-gradient-to-r from-amber-500 to-orange-600 px-6 py-5 flex justify-between items-center sticky top-0 z-10">
            <div className="flex items-center space-x-3">
              <div className="h-12 w-12 bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center">
                <Building2 className="h-6 w-6 text-white" />
              </div>
              <div>
                <h2 className="text-2xl font-bold text-white">Salon Verification Details</h2>
                <p className="text-amber-100 text-sm">Review complete salon information for approval</p>
              </div>
            </div>
            <button
              onClick={() => {
                setShowSalonDetailsModal(false);
                setSelectedSalonId(null);
              }}
              className="p-2 hover:bg-white/20 rounded-lg transition-colors"
            >
              <X className="h-6 w-6 text-white" />
            </button>
          </div>

          {/* Content */}
          <div className="overflow-y-auto max-h-[calc(95vh-180px)] p-6">
            {salonDetailsLoading ? (
              <div className="flex flex-col items-center justify-center py-12">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600 mb-4"></div>
                <p className="text-slate-600">Loading salon details...</p>
              </div>
            ) : salonDetails ? (
              <div className="space-y-6">
                {/* Logo and Cover Images */}
                {(salonDetails.logo || (salonDetails.coverImages && salonDetails.coverImages.length > 0)) && (
                  <div className="bg-gradient-to-br from-indigo-50 to-purple-50/50 rounded-2xl p-6 border border-indigo-200">
                    <h3 className="text-lg font-bold text-slate-900 mb-4 flex items-center">
                      <Camera className="h-5 w-5 mr-2 text-indigo-600" />
                      Branding & Cover Images
                    </h3>
                    <div className="space-y-4">
                      {salonDetails.logo && (
                        <div>
                          <p className="text-sm text-slate-600 font-medium mb-2">Salon Logo</p>
                          <div className="w-32 h-32 rounded-xl overflow-hidden border-2 border-indigo-200">
                            <img src={salonDetails.logo} alt="Salon Logo" className="w-full h-full object-cover" />
                          </div>
                        </div>
                      )}
                      {salonDetails.coverImages && salonDetails.coverImages.length > 0 && (
                        <div>
                          <p className="text-sm text-slate-600 font-medium mb-2">Cover Images ({salonDetails.coverImages.length})</p>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                            {salonDetails.coverImages.map((image: string, index: number) => (
                              <div key={index} className="aspect-video rounded-xl overflow-hidden border-2 border-indigo-200">
                                <img src={image} alt={`Cover ${index + 1}`} className="w-full h-full object-cover hover:scale-110 transition-transform duration-300" />
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Basic Information */}
                <div className="bg-gradient-to-br from-amber-50 to-orange-50/50 rounded-2xl p-6 border border-amber-200">
                  <h3 className="text-lg font-bold text-slate-900 mb-4 flex items-center">
                    <Building2 className="h-5 w-5 mr-2 text-amber-600" />
                    Basic Information
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Salon Name</p>
                      <p className="text-base text-slate-900 font-semibold">{salonDetails.name}</p>
                    </div>
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Email</p>
                      <p className="text-base text-slate-900">{salonDetails.email || 'N/A'}</p>
                    </div>
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Phone</p>
                      <p className="text-base text-slate-900">{salonDetails.phone || 'N/A'}</p>
                    </div>
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Number of Employees</p>
                      <p className="text-base text-slate-900 font-semibold">{salonDetails.numberOfEmployees || 'N/A'}</p>
                    </div>
                    {salonDetails.description && (
                      <div className="md:col-span-2">
                        <p className="text-sm text-slate-600 font-medium">Description</p>
                        <p className="text-base text-slate-900">{salonDetails.description}</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Location Information */}
                <div className="bg-gradient-to-br from-cyan-50 to-blue-50/50 rounded-2xl p-6 border border-cyan-200">
                  <h3 className="text-lg font-bold text-slate-900 mb-4 flex items-center">
                    <MapPin className="h-5 w-5 mr-2 text-cyan-600" />
                    Location Details
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Full Address</p>
                      <p className="text-base text-slate-900">{salonDetails.address}</p>
                    </div>
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Province</p>
                      <p className="text-base text-slate-900 capitalize">{salonDetails.province}</p>
                    </div>
                    <div>
                      <p className="text-sm text-slate-600 font-medium">District</p>
                      <p className="text-base text-slate-900 capitalize">{salonDetails.district}</p>
                    </div>
                    {salonDetails.sector && (
                      <div>
                        <p className="text-sm text-slate-600 font-medium">Sector</p>
                        <p className="text-base text-slate-900 capitalize">{salonDetails.sector}</p>
                      </div>
                    )}
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Coordinates</p>
                      <p className="text-base text-slate-900 font-mono text-sm">
                        {salonDetails.latitude?.toFixed(6)}, {salonDetails.longitude?.toFixed(6)}
                      </p>
                    </div>
                  </div>
                </div>

                {/* Owner Information */}
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50/50 rounded-2xl p-6 border border-blue-200">
                  <h3 className="text-lg font-bold text-slate-900 mb-4 flex items-center">
                    <User className="h-5 w-5 mr-2 text-blue-600" />
                    Owner Information
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {salonDetails.ownerId && (
                      <>
                        <div>
                          <p className="text-sm text-slate-600 font-medium">Owner Name</p>
                          <p className="text-base text-slate-900 font-semibold">{salonDetails.ownerId.name}</p>
                        </div>
                        <div>
                          <p className="text-sm text-slate-600 font-medium">Owner Email</p>
                          <p className="text-base text-slate-900">{salonDetails.ownerId.email}</p>
                        </div>
                        <div>
                          <p className="text-sm text-slate-600 font-medium">Owner Phone</p>
                          <p className="text-base text-slate-900">{salonDetails.ownerId.phone || 'N/A'}</p>
                        </div>
                      </>
                    )}
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Owner ID Number</p>
                      <p className="text-base text-slate-900 font-mono">{salonDetails.ownerIdNumber}</p>
                    </div>
                    <div>
                      <p className="text-sm text-slate-600 font-medium">Owner Contact Phone</p>
                      <p className="text-base text-slate-900">{salonDetails.ownerContactPhone}</p>
                    </div>
                    {salonDetails.ownerContactEmail && (
                      <div>
                        <p className="text-sm text-slate-600 font-medium">Owner Contact Email</p>
                        <p className="text-base text-slate-900">{salonDetails.ownerContactEmail}</p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Service Categories */}
                {salonDetails.serviceCategories && salonDetails.serviceCategories.length > 0 && (
                  <div className="bg-gradient-to-br from-teal-50 to-emerald-50/50 rounded-2xl p-6 border border-teal-200">
                    <h3 className="text-lg font-bold text-slate-900 mb-4 flex items-center">
                      <Briefcase className="h-5 w-5 mr-2 text-teal-600" />
                      Service Categories
                    </h3>
                    <div className="flex flex-wrap gap-2">
                      {salonDetails.serviceCategories.map((category: string, index: number) => (
                        <span key={index} className="px-4 py-2 bg-teal-100 text-teal-800 rounded-full text-sm font-medium capitalize">
                          {category}
                        </span>
                      ))}
                    </div>
                    {salonDetails.customServices && (
                      <div className="mt-4">
                        <p className="text-sm text-slate-600 font-medium">Custom Services</p>
                        <p className="text-base text-slate-900 mt-1">{salonDetails.customServices}</p>
                      </div>
                    )}
                  </div>
                )}

                {/* Services */}
                {salonDetails.services && salonDetails.services.length > 0 && (
                  <div className="bg-gradient-to-br from-emerald-50 to-green-50/50 rounded-2xl p-6 border border-emerald-200">
                    <h3 className="text-lg font-bold text-slate-900 mb-4 flex items-center">
                      <Scissors className="h-5 w-5 mr-2 text-emerald-600" />
                      Services Offered ({salonDetails.services.length})
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {salonDetails.services.map((service: any, index: number) => (
                        <div key={index} className="bg-white rounded-xl p-4 border border-emerald-200 shadow-sm">
                          <p className="font-semibold text-slate-900 text-lg">{service.title || service.name}</p>
                          {service.description && (
                            <p className="text-sm text-slate-600 mt-1">{service.description}</p>
                          )}
                          <div className="flex justify-between items-center mt-3 pt-3 border-t border-emerald-100">
                            <span className="text-emerald-600 font-bold text-lg">{service.price} RWF</span>
                            <span className="text-sm text-slate-500 flex items-center">
                              <Clock className="h-4 w-4 mr-1" />
                              {service.durationMinutes || service.duration} min
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Barbers */}
                {salonDetails.barbers && salonDetails.barbers.length > 0 && (
                  <div className="bg-gradient-to-br from-purple-50 to-pink-50/50 rounded-2xl p-6 border border-purple-200">
                    <h3 className="text-lg font-bold text-slate-900 mb-4 flex items-center">
                      <Users className="h-5 w-5 mr-2 text-purple-600" />
                      Barbers ({salonDetails.barbers.length})
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {salonDetails.barbers.map((barber: any, index: number) => (
                        <div key={index} className="bg-white rounded-xl p-4 border border-purple-200 flex items-center space-x-4">
                          <div className="h-12 w-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center text-white font-bold">
                            {barber.name.charAt(0)}
                          </div>
                          <div className="flex-1">
                            <p className="font-semibold text-slate-900">{barber.name}</p>
                            <p className="text-sm text-slate-600">{barber.specialization || 'General Barber'}</p>
                            {barber.experience && (
                              <p className="text-xs text-slate-500 mt-1">{barber.experience} years experience</p>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Gallery */}
                {salonDetails.gallery && salonDetails.gallery.length > 0 && (
                  <div className="bg-gradient-to-br from-rose-50 to-red-50/50 rounded-2xl p-6 border border-rose-200">
                    <h3 className="text-lg font-bold text-slate-900 mb-4 flex items-center">
                      <Camera className="h-5 w-5 mr-2 text-rose-600" />
                      Gallery ({salonDetails.gallery.length})
                    </h3>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                      {salonDetails.gallery.map((image: string, index: number) => (
                        <div key={index} className="aspect-square rounded-xl overflow-hidden border border-rose-200">
                          <img 
                            src={image} 
                            alt={`Gallery ${index + 1}`}
                            className="w-full h-full object-cover hover:scale-110 transition-transform duration-300"
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {renderContent()}
        <CreateUserModal />
        <SalonDetailsModal />
      </div>
    </DashboardLayout>
  );
};

export default AdminPanel;